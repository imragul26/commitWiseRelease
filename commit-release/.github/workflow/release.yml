name: Release from PR Commits

on:
  pull_request:
    types: [closed]
    branches: [main, master]
  workflow_dispatch: # Optional: allows manual triggering

jobs:
  check-merged:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check-release-tag.outputs.should_release }}
      pr_number: ${{ github.event.number }}
    
    steps:
      - name: Check for release tag in PR
        id: check-release-tag
        run: |
          # Check if PR title or description contains release tag pattern
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          
          if [[ "$PR_TITLE" =~ \[release\]|\[tag\] ]] || [[ "$PR_BODY" =~ \[release\]|\[tag\] ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  generate-release:
    needs: check-merged
    if: needs.check-merged.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    outputs:
      release_notes: ${{ steps.generate-notes.outputs.release_notes }}
      tag_name: ${{ steps.generate-tag.outputs.tag_name }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Generate version tag
        id: generate-tag
        run: |
          # Generate tag name with timestamp and PR number
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          TAG_NAME="v$(date +%Y.%m.%d)-PR${{ github.event.number }}-${TIMESTAMP}"
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "Generated tag: ${TAG_NAME}"

      - name: Extract all commit messages from PR
        id: generate-notes
        run: |
          # Get the base and head commits of the merged PR
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.merge_commit_sha }}
          
          echo "Base SHA: ${BASE_SHA}"
          echo "Head SHA: ${HEAD_SHA}"
          
          # Get all commit messages in the PR
          COMMIT_MESSAGES=$(git log --pretty=format:"- **%h**: %s (%an)%n  > %b" ${BASE_SHA}..${HEAD_SHA} --reverse)
          
          # Create release notes
          RELEASE_NOTES="# Release Notes for PR #${{ github.event.number }}

          **PR Title**: ${{ github.event.pull_request.title }}
          **Merged By**: ${{ github.event.pull_request.merged_by.login }}
          **Merge Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ## Commits included in this release:

          ${COMMIT_MESSAGES}

          ---
          *Automatically generated from PR #${{ github.event.number }}*"
          
          # Escape for output
          RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
          
          echo "::set-output name=release_notes::$RELEASE_NOTES"

      - name: Create Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ steps.generate-tag.outputs.tag_name }} ${{ github.event.pull_request.merge_commit_sha }}
          git push origin ${{ steps.generate-tag.outputs.tag_name }}

  create-github-release:
    needs: [check-merged, generate-release]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build Spring Boot application
        run: mvn clean package -DskipTests

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.generate-release.outputs.tag_name }}
          name: "Release from PR #${{ needs.check-merged.outputs.pr_number }}"
          body: ${{ needs.generate-release.outputs.release_notes }}
          files: |
            target/*.jar
            target/*.war
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
