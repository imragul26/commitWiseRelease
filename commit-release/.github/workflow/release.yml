name: 📦 Generate Release with Commit Messages

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., 1.2.3)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 Generate release notes with PRs and commits
        id: generate-notes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ github.event.inputs.version }}';
            
            // Get the latest release to find previous tag
            let previousTag = '1.0.0';
            try {
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 5
              });
              
              if (releases && releases.length > 0) {
                previousTag = releases[0].tag_name;
              }
            } catch (error) {
              console.log('Using default previous tag');
            }
            
            console.log('Previous tag:', previousTag);
            
            // Get all merged PRs
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              sort: 'updated',
              direction: 'desc',
              per_page: 50
            });
            
            let releaseNotes = "## What's Changed\n\n";
            const processedPRs = new Set();
            
            // Process each PR to get title and commits
            for (const pr of pulls) {
              if (pr.merged_at && !processedPRs.has(pr.number)) {
                processedPRs.add(pr.number);
                
                try {
                  // Get all commits for this PR
                  const { data: commits } = await github.rest.pulls.listCommits({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number
                  });
                  
                  // Add PR title with link
                  releaseNotes += `* **${pr.title}** by @${pr.user.login} in [#${pr.number}](${pr.html_url})\n`;
                  
                  // Add all commit messages
                  if (commits && commits.length > 0) {
                    releaseNotes += "\n";
                    commits.forEach(commit => {
                      const message = commit.commit.message.split('\n')[0]; // First line only
                      const shaShort = commit.sha.substring(0, 7);
                      releaseNotes += `  • ${shaShort}: ${message}\n`;
                    });
                    releaseNotes += "\n";
                  } else {
                    releaseNotes += "  • No commit messages available\n\n";
                  }
                  
                } catch (error) {
                  console.log(`Error processing PR #${pr.number}:`, error.message);
                  releaseNotes += `* **${pr.title}** by @${pr.user.login} in [#${pr.number}](${pr.html_url})\n`;
                  releaseNotes += "  • Error fetching commit messages\n\n";
                }
              }
            }
            
            if (processedPRs.size === 0) {
              releaseNotes += "No pull requests merged since last release.\n\n";
            }
            
            // Add full changelog link
            releaseNotes += `\n**Full Changelog**: https://github.com/${context.repo.owner}/${context.repo.repo}/compare/${previousTag}...v${version}\n`;
            
            console.log('Generated release notes for', processedPRs.size, 'PRs');
            core.setOutput('release-notes', releaseNotes);

      - name: 📄 Display generated notes (for debugging)
        run: |
          echo "Generated Release Notes:"
          echo '${{ steps.generate-notes.outputs.release-notes }}'

      - name: 🚀 Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body: ${{ steps.generate-notes.outputs.release-notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
